//Intersection of two Sorted Linked Lists
package intersectionofsortedlist;

public class LinkedList 
{
	static class Node
	{
		int data;
		Node next;
		Node(int data, Node next) {
	        this.data = data;
	        this.next = next;}
	}
	static Node intersection(Node node1,Node node2)
	{
		Node head = null, tail = null;
		while(node1!=null && node2!=null)
		{
			
			if(node1.data==node2.data)
			{
				 if (head == null) {
	                    tail = head = new Node(node1.data, head);
	                }
	                else {
	                    tail = tail.next = new Node(node1.data, tail.next);
	                }
				node1=node1.next;
				node2=node2.next;
			}
			else if(node1.data<node2.data)
			{
				node1=node1.next;
			}
			else
			{
				node2=node2.next;
			}
		}
		return head;
	}
	static void display(Node node)
	{
		while(node!=null)
		{
			System.out.println(node.data);
			node=node.next;
		}
	}
	public static void main(String[] args) 
	{
		int[] keys = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
		 
        Node a = null;
        for (int i = keys.length - 1; i >= 0; i = i - 3) {
            a = new Node(keys[i], a);
        }
        display(a);
        Node b = null;
        for (int i = keys.length - 1; i >= 0; i = i - 2) {
            b = new Node(keys[i], b);
        }
		Node head=intersection(a,b);
		//display(head);
		
	}
}
