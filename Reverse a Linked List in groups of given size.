//Reverse a Linked List in groups of given size
import java.util.*;
class Node
{
	int data;
	Node next;
	Node(int data)
	{
		this.data=data;
		this.next=null;
	}
}
public class LinkedList 
{
	static Node head;
	static Stack<Node> st = new Stack<>();
	public static Node reverse(Node head, int k)
    {
		Stack<Node> mystack = new Stack<Node> ();  
	    Node current = head;  
	    Node prev = null;  
	  
	    while (current != null) 
	    {  
	        int count = 0;  
	        while (current != null && count < k) 
	        {  
	            mystack.push(current);  
	            current = current.next;  
	            count++;  
	        }  
	        while (mystack.size() > 0)  
	        {  
	            if (prev == null) 
	            {  
	                prev = mystack.peek();  
	                head = prev;  
	                mystack.pop();  
	            }  
	            else
	            {  
	                prev.next = mystack.peek();  
	                prev = prev.next;  
	                mystack.pop();  
	            }  
	        }  
	    }   
	    prev.next = null;  
	  
	    return head; 
    }
	static void print(Node head)
	{
		Node temp =head;
		while(temp!=null)
		{
			System.out.print(temp.data+" ");
			temp=temp.next;
		}
	}
	public static void main(String[] args) 
	{
		Node head1 = new Node(1);
		head1.next = new Node(2);
		head1.next.next = new Node(3);
		head1.next.next.next = new Node(4);
		head1.next.next.next.next = new Node(5);
		head1.next.next.next.next.next = new Node(6);
		head1.next.next.next.next.next.next = new Node(7);
		head1.next.next.next.next.next.next.next = new Node(8);
		head1.next.next.next.next.next.next.next.next = new Node(9);
		Node ans =reverse(head1,3);
		print(ans);
	}
}
// Below is efficient one
import java.util.*;
class ListNode
{
	int data;
	ListNode next;

	ListNode(int data)
	{
		this.data=data;
		this.next=null;
	}
}
public class LinkedListPractice 
{
	public static ListNode reverseLL(ListNode head)
	{
		if(head==null || head.next==null)
			return head;
		ListNode curr=head.next;
		ListNode prev = head;
		ListNode next = null;
		while(curr!=null)
		{
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr=next;
		}
		return prev;
	}
	public static ListNode reverseKgroup(ListNode head,int k)
	{
		ListNode Sentinel = new ListNode(-1);
		
		Sentinel.next = head;
		ListNode currSentinel = Sentinel;
		
		while(currSentinel!=null)
		{
			int ctr = 0;
			
			ListNode ptr = currSentinel;
			
			while(ptr!=null && ctr<k)
			{
				ctr++;
				ptr=ptr.next;
			}
			
			if(ptr==null)
			{
				break;
			}
			
			ListNode first = currSentinel.next;
			ListNode last = ptr;
			ListNode nextptr = last.next;
			last.next =null;
			
			currSentinel.next = reverseLL(currSentinel.next);
			
			first.next = nextptr;
			
			currSentinel = first;
		}
		return Sentinel.next;
	}
	static void print(ListNode head)
	{
		ListNode temp =head;
		while(temp!=null)
		{
			System.out.print(temp.data+" ");
			temp=temp.next;
		}
	}
	public static void main(String[] args) 
	{
		ListNode head1 = new ListNode(1);
		head1.next = new ListNode(2);
		head1.next.next = new ListNode(3);
		head1.next.next.next = new ListNode(4);
		head1.next.next.next.next = new ListNode(5);
		head1.next.next.next.next.next = new ListNode(6);
		head1.next.next.next.next.next.next = new ListNode(7);
		ListNode ans = reverseKgroup( head1, 2);
		
		print(ans);
	}

}

