//Remove duplicates in s linked List 2
Time Complexity O(n^2)
Space Complexity O(1)

class ListNode {
	int val;
	ListNode next;

	ListNode(int d) {
		this.val = d;
		this.next = null;
	}
}

public class LinkedList {

	public static ListNode deleteDuplicates(ListNode head) {

		ListNode ptr1 = head;
		ListNode ptr2 = null;

		while (ptr1 != null && ptr1.next != null) {

			ptr2 = ptr1;
			
			while (ptr2.next != null) {
				
				if (ptr1.val == ptr2.next.val) {
					ptr2.next = ptr2.next.next;
				} else {
					ptr2 = ptr2.next;
				}
				
			}
			ptr1 = ptr1.next;
		}
		
		return head;
	}

	static void print(ListNode head) {
		ListNode temp = head;
		while (temp != null) {
			System.out.print(temp.val + " ");
			temp = temp.next;
		}
	}

	public static void main(String[] args) {
		ListNode head = new ListNode(10);
		head.next = new ListNode(12);
		head.next.next = new ListNode(11);
		head.next.next.next = new ListNode(11);
		head.next.next.next.next = new ListNode(12);
		head.next.next.next.next.next = new ListNode(10);
		head.next.next.next.next.next.next = new ListNode(10);

		ListNode ans = deleteDuplicates(head);
		print(ans);
	}
}

// Java program to remove duplicates
// from unsorted linkedlist


Time Complexity O(n)
Space Complexity O(n)

import java.util.HashSet;

public class removeDuplicates
{
	static class node
	{
		int val;
		node next;

		public node(int val)
		{
			this.val = val;
		}
	}
	
	/* Function to remove duplicates from a
	unsorted linked list */
	static void removeDuplicate(node head)
	{
		// Hash to store seen values
		HashSet<Integer> hs = new HashSet<>();
	
		/* Pick elements one by one */
		node current = head;
		node prev = null;
		while (current != null)
		{
			int curval = current.val;
			
			// If current value is seen before
			if (hs.contains(curval)) {
				prev.next = current.next;
			} else {
				hs.add(curval);
				prev = current;
			}
			current = current.next;
		}

	}
	
	/* Function to print nodes in a given linked list */
	static void printList(node head)
	{
		while (head != null)
		{
			System.out.print(head.val + " ");
			head = head.next;
		}
	}

	public static void main(String[] args)
	{
		/* The constructed linked list is:
		10->12->11->11->12->11->10*/
		node start = new node(10);
		start.next = new node(12);
		start.next.next = new node(11);
		start.next.next.next = new node(11);
		start.next.next.next.next = new node(12);
		start.next.next.next.next.next = new node(11);
		start.next.next.next.next.next.next = new node(10);

		System.out.println("Linked list before removing duplicates :");
		printList(start);

		removeDuplicate(start);

		System.out.println("\nLinked list after removing duplicates :");
		printList(start);
	}
}

class ListNode
{
	int val;
	ListNode next ;
	ListNode (int d)
	{
		this.val = d;
		this.next = null;
	}
}
public class LInkedList 
{
	public static ListNode deleteDuplicates(ListNode head)
    {
		ListNode sentinel = new ListNode(0);
		
		sentinel.next = head;
		
		ListNode predecessor = sentinel;
		while(head!=null)
		{
			if(head.next != null && head.val == head.next.val)
			{
				while(head.next!=null && head.val==head.next.val)
				{
					head=head.next;
				}
				predecessor.next = head.next; 
			}
			else
			{
				predecessor = predecessor.next;
			}
			head=head.next;
		}
		
		return sentinel.next;
    }
	static void print(ListNode head)
	{
		ListNode temp =head;
		while(temp!=null)
		{
			System.out.print(temp.val+" ");
			temp=temp.next;
		}
	}
	public static void main(String[] args) 
	{
		ListNode head = new ListNode(1);
		head.next = new ListNode(2);
		head.next.next = new ListNode(3);
		head.next.next.next = new ListNode(3);
		head.next.next.next.next = new ListNode(4);
		head.next.next.next.next.next = new ListNode(4);
		head.next.next.next.next.next.next = new ListNode(5);
		
		ListNode ans  = deleteDuplicates(head);
		print(ans);
	}

}
