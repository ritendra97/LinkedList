//Partitioning a linked list around a given value and keeping the original order
import java.util.*;
//Partitioning a linked list around a given value and keeping the original order
class Node {
	
	int data;
	Node next;
	Node(int data) {
		
		this.data=data;
		this.next=null;
	}
}
public class LinkedListPractice {
	
	public static int length(Node node) {
		
		int n=0;
		while(node!=null) {
			node = node.next;
			n++;
		}
		
		return n;
	}
	
	public static Node helper(int x, Node head) {
		
		Node smallerhead = null;
		Node smallerlast = null;
		Node greaterhead = null;
		Node greaterlast = null;
		Node equalhead = null;
		Node equallast = null;
		
		while(head!=null) {
			
			if(head.data==x){
				
				if(smallerhead==null) {
					
					smallerhead = smallerlast = head;
				}else {
					smallerlast.next = head;
					smallerlast = smallerlast.next;
				}
				
			}else if (head.data<x){
				
                if(equalhead==null) {
					
                	equalhead = equallast = head;
				}else {
					equallast.next = head;
					equallast = equallast.next;
				}

			}else {
				
                if(greaterhead==null) {
					
                	greaterhead = greaterlast = head;
				}else {
					greaterlast.next = head;
					greaterlast = greaterlast.next;
				}
			}
			head = head.next;
		}
		
		if(greaterlast!=null) {
			greaterlast.next=null;
		}
		
		if(smallerhead==null) {
			
			if(equalhead==null) {
				return greaterhead;
			}
			
			equallast.next = greaterhead;
			return equalhead;
		}
		
		if(equalhead==null) {
			smallerlast.next = greaterhead;
			return smallerhead;
		}
		
		smallerlast.next = equalhead;
		equallast.next = greaterhead;
		return smallerhead;
	}		
	public static void print(Node head) {
		
		Node node = head;
		while(node!=null) {
			System.out.println(node.data);
			node = node.next;
		}
	}
	public static void main(String[] args) {
		
		Node head = new Node(10);
		head.next = new Node(4);
		head.next.next = new Node(5);
		head.next.next.next = new Node(30);
		head.next.next.next.next = new Node(2);
		head.next.next.next.next.next = new Node(50);
		 
		int x = 3;
		
		Node head2 = new Node(10);
		head2.next = new Node(17);
		head2.next.next = new Node(30);
		
		Node head1 = helper(3,head);
		
		//System.out.println(head.data);
		print(head1);
	}
}
