//Flattening a linked list
import java.util.*;
class Node
{
	int data;
	Node right;
	Node down;
	Node(int data)
	{
		this.data=data;
		this.right=null;
		this.down=null;
	}
}
class pair
{
	int val;
	Node head;
	pair(Node head,int val)
	{
		this.head=head;
		this.val=val;
	}
}
public class Flatteningalinkedlist 
{
	static PriorityQueue<pair> pq = new PriorityQueue<pair>(new Comparator<pair>(){
		public int compare(pair a,pair b)
		{
			return a.val-b.val;
		}
	}); 
	public static Node flatten(Node root)
	{
		Node start=null;
		Node next=null;
		Node ptr=root;
		while(ptr!=null)
		{
			pq.add(new pair(ptr,ptr.data));
			ptr=ptr.right;
		}
		while(!pq.isEmpty())
		{
			Node top = pq.poll().head;
			if(top.down!=null)
			{
				pq.add(new pair(top.down,top.data));
			}
			if(start==null)
			{
				start=top;
				next=start;
				next.right=null;
			}
			else
			{
				next.down=top;
				next=top;
				next.right=null;
			}
		}
		return start;
	}
	public static Node push(Node head_ref, int data)
    {
       Node new_node = new Node(data);
       new_node.down = head_ref;
       head_ref = new_node;
       return head_ref;
    }
	public static void printList(Node h)
    {
        while (h != null) {
            System.out.print(h.data + " ");
            h = h.down;
        }
    }
	public static void main(String[] args) 
	{
		Node head = null;
		 
        head = push(head, 30);
        head = push(head, 8);
        head = push(head, 7);
        head = push(head, 5);
 
        head.right = push(head.right, 20);
        head.right = push(head.right, 10);
 
        head.right.right = push(
                  head.right.right, 50);
        head.right.right = push(
                  head.right.right, 22);
        head.right.right = push(
                  head.right.right, 19);
 
        head.right.right.right
            = push(
          head.right.right.right, 45);
        head.right.right.right
            = push(
              head.right.right.right, 40);
        head.right.right.right
            = push(
              head.right.right.right, 35);
        head.right.right.right
            = push(head.right.right.right, 20);
        
        head = flatten(head);
        printList(head);
	}
}
