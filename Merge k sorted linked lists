//Merge k sorted linked lists 

Complexity Analysis: 
     Assuming N(n*k) is the total number of nodes, n is the size of each linked list, and k is the total number of linked lists.
•	Time Complexity: O(N*log k) or O(n*k*log k)
As outer while loop in function mergeKLists() runs log k times and every time it processes n*k elements.
•	Auxiliary Space: O(N) or O(n*k)
Because recursion is used in SortedMerge() and to merge the final 2 linked lists of size N/2, N recursive calls will be made.

public class LinkedList {

	public static Node SortedMerge(Node a, Node b) {
		Node result = null;

		if (a == null)
			return b;
		else if (b == null)
			return a;

		if (a.data <= b.data) {
			result = a;
			result.next = SortedMerge(a.next, b);
		} else {
			result = b;
			result.next = SortedMerge(a, b.next);
		}

		return result;
	}

	public static Node mergeKLists(Node arr[], int last) {
		while (last != 0) {
			int i = 0, j = last;

			while (i < j) {

				arr[i] = SortedMerge(arr[i], arr[j]);

				i++;
				j--;

				if (i >= j)
					last = j;
			}
		}

		return arr[0];
	}

	public static void printList(Node node) {
		while (node != null) {
			System.out.print(node.data + " ");
			node = node.next;
		}
	}

	public static void main(String args[]) {
		int k = 3;
		int n = 4;

		Node arr[] = new Node[k];

		arr[0] = new Node(1);
		arr[0].next = new Node(3);
		arr[0].next.next = new Node(5);
		arr[0].next.next.next = new Node(7);

		arr[1] = new Node(2);
		arr[1].next = new Node(4);
		arr[1].next.next = new Node(6);
		arr[1].next.next.next = new Node(8);

		arr[2] = new Node(0);
		arr[2].next = new Node(9);
		arr[2].next.next = new Node(10);
		arr[2].next.next.next = new Node(11);

		Node head = mergeKLists(arr, k - 1);
		printList(head);
	}
}

class Node {
	int data;
	Node next;

	Node(int data) {
		this.data = data;
	}
}

Complexity Analysis: 
     Assuming N(n*k) is the total number of nodes, n is the size of each linked list, and k is the total number of linked lists.
•	Time Complexity: O(N*log k) or O(n*k*log k)
As outer while loop in function mergeKLists() runs log k times and every time it processes n*k elements.
•	Auxiliary Space: O(N) or O(k)
Because recursion is used in SortedMerge() and to merge the final 2 linked lists of size N/2, N recursive calls will be made.

import java.util.Comparator;
import java.util.PriorityQueue;

class ListNode {
	
	int data;
	ListNode next;

    ListNode(int data) {
		this.data = data;
		this.next = null;
	}

}

public class LinkedList {

	public static ListNode mergeKList(ListNode node1, ListNode node2, ListNode node3, int k) {

		ListNode head = null;
		ListNode temp = null;

		PriorityQueue<ListNode> pq = new PriorityQueue<>(new Comparator<ListNode>() {
			public int compare(ListNode a, ListNode b) {
				return a.data - b.data;
			}
		});

		pq.add(node1);
		pq.add(node2);
		pq.add(node3);

		while (!pq.isEmpty()) {

			ListNode new_node = pq.remove();

			if (head == null) {
				head = new_node;
				temp = head;
			} else {
				temp.next = new_node;
				temp = temp.next;
			}
			if (new_node.next != null) {
				pq.add(new_node.next);
			}
		}

		return head;
	}

	public static void print(ListNode node) {
		
		while (node != null) {
			System.out.print(node.data + " ");
			node = node.next;
		}
	}

	public static void main(String[] args) {

		ListNode head1 = new ListNode(1);
		head1.next = new ListNode(3);
		head1.next.next = new ListNode(5);
		head1.next.next.next = new ListNode(7);

		ListNode head2 = new ListNode(2);
		head2.next = new ListNode(4);
		head2.next.next = new ListNode(6);
		head2.next.next.next = new ListNode(8);

		ListNode head3 = new ListNode(0);
		head3.next = new ListNode(9);
		head3.next.next = new ListNode(10);
		head3.next.next.next = new ListNode(11);
		
		ListNode ans = mergeKList(head1,head2,head3, 3);
		print(ans);
	}

}

import java.util.*;
class Node
{
	int data;
	Node next;
	Node(int data)
	{
		this.data=data;
		this.next=null;
	}
	public Integer getvalue()
	{
		return data;
	}
}
public class LinkedList 
{
	static PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {
		public int compare(Node a,Node b)
		{
			return a.data - b.data;
		}
	});
	static Node newhead =null;
	static Node last=null;
	static Node head;
	public static void push(int data)
    {
	     Node new_node=new Node(data);
	     new_node.data=data;
	     new_node.next=head;
	     head=new_node;
    }
	public static Node mergeKSortedLists(Node head, int k)
	{
	    for (int i = 0; head != null && i <=k; i++) 
	    {  
		     pq.add(head); 
		     head = head.next; 
		}
	    while(!pq.isEmpty())
	    {
	    	Node top = pq.peek();
	    	pq.remove();
	    	if(newhead==null)
	    	{
	    		newhead=top;
	    		last=top;
	    	}
	    	else
	    	{
	    		last.next=top;
	    		last=top;
	    	}
	    	if(head!=null)
	    	{
	    		pq.add(head);  
	            head = head.next; 
	    	}
	    	last.next=null;
	    }
	    return newhead;
	}
	static void print(Node node)
	{
		while(node!=null)
		{
			System.out.println(node.data);
			node=node.next;
		}
	}
	public static void main(String[] args) 
	{
		push(8);
		push(56);
		push(12);
		push(2);
		push(6);
		push(3);
		Node new_head=mergeKSortedLists(head,2);
		print(new_head); 
	}
}
