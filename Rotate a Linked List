/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/*
// this is O(nk) time complexity solution
// now i optimized it.
 public ListNode rotateRight(ListNode head, int k) 
    {
        if (head == null) return null;
    	
    	ListNode curr = head;
        int size = 1;
        var start = head;
        while (start.next != null) {
            size++;
            start = start.next;
        }
        k = k % size;
    	while(curr!=null && k>0)
    	{
    		curr = head;
    		ListNode prevcurr = curr;
    		while(curr.next!=null)
    		{
    			prevcurr = curr;
    			curr=curr.next;
    		}
    		curr.next = head;
    		head = curr;
    		prevcurr.next=null;
    		k--;
    	}
    	return head;
        
    }
*/
class Solution {
    // this solution contibute O(n) complexity
    public ListNode rotateRight(ListNode head, int k) 
    {
        if(head==null || head.next==null)
             return head;
        if (k == 0)
          return head;
        
        ListNode current = head;
 
        int size = 1;
        ListNode start = head;
        while (start.next != null) {
            size++;
            start = start.next;
        }
        
        start.next = head;
        k = k % size;
        for (int i = 0; i < size-k ; i++)
           start = start.next;
        
        head = start.next;
        start.next = null;
        return head;
    }
}
