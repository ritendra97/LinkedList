//Merge Sort for Linked Lists
import java.util.*;
class Node
{
	int data;
	Node next;
	Node(int data)
	{
		this.data=data;
		this .next=null;
	}
}
public class LinkedList 
{
	public static Node getMiddle(Node head) 
    { 
        if (head == null) 
            return head; 
        Node slow = head, fast = head; 
        while (fast.next != null && fast.next.next != null) 
        { 
            slow = slow.next; 
            fast = fast.next.next; 
        } 
        return slow; 
    } 
	static Node sortedMerge(Node a, Node b) 
    { 
		Node result =null;
		if(a==null)
			return b;
		if(b==null)
			return a;
		if(a.data<b.data)
		{
			result=a;
			result.next = sortedMerge(a.next,b);
		}
		else
		{
			result=b;
			result.next = sortedMerge(a,b.next);

		}
		return result;
    }
	static Node mergeSort(Node h) 
    {
		if(h==null || h.next==null)
			return h;
		Node mid = getMiddle(h);
		Node nexttomiddle = mid.next;
		mid.next=null;
		Node left = mergeSort(h);
		Node right = mergeSort(nexttomiddle);
		Node sortedlist = sortedMerge(left,right);
		return sortedlist;
    }
	static void print(Node head)
	{
		Node temp =head;
		while(temp!=null)
		{
			System.out.print(temp.data+" ");
			temp=temp.next;
		}
	}
	public static void main(String[] args) 
	{
		Node head1 = new Node(1);
		head1.next = new Node(-2);
		head1.next.next = new Node(-3);
		head1.next.next.next = new Node(4);
		head1.next.next.next.next = new Node(-5);
		Node ans= mergeSort(head1);
		print(ans);
	}
}
