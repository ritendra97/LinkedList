//Merge N(no of linked list) sorted linked lists
import java.util.*;
import java.lang.*;
class Node
{
	int data;
	Node next;
	Node(int data)
	{
		this.data=data;
		this.next=null;
	}
	
}
public class LinkedList 
{
	static PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>(){
		public int compare(Node a , Node b)
		{
			return a.data-b.data;
		}
	});
	static Node head;
	static Node ans;
	public static Node mergeKSortedLists(Node arr[], int k)
	{
		for(int i=0;i<arr.length;i++)
		{
			pq.add(arr[i]);
		}
		while(!pq.isEmpty())
		{
			Node top = pq.remove();
			if(top.next!=null)
			{
				pq.add(top.next);
			}
			if(head==null)
			{
				head=top;
				ans=head;
			}
			else
			{
				ans.next=top;
				ans=ans.next;
			}
			
		}
		return head;
	}
	public static void printList(Node head)
    {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
    }
	public static void main(String[] args) 
	{
		int k=3;
		Node arr[] = new Node[k];
		
		arr[0] = new Node(1);
	    arr[0].next = new Node(3);
	    arr[0].next.next = new Node(5);
	    arr[0].next.next.next = new Node(7);
	 
	    arr[1] = new Node(2);
        arr[1].next = new Node(4);
        arr[1].next.next = new Node(6);
	    arr[1].next.next.next = new Node(8);
	 
        arr[2] = new Node(0);
        arr[2].next = new Node(9);
	    arr[2].next.next = new Node(10);
	    arr[2].next.next.next = new Node(11);
		
	    Node ans =  mergeKSortedLists(arr,k);
	    printList(ans);
	}
}
