//Reverse Linked List II
import java.util.*;
class ListNode
{
	int data;
	ListNode next;

	ListNode(int data)
	{
		this.data=data;
		this.next=null;
	}
}
public class LinkedListPractice 
{
	public static ListNode reverseBetween(ListNode head, int left, int right) 
    { 
    	if(head==null && head.next==null)
    		return head;
    	
        ListNode prev = null;
        ListNode curr = head;
        while(left>1) {
            prev = curr;
            curr=curr.next;
            left--;
            right--;
        }
        
        ListNode con = prev;
        ListNode tail= curr;
        
        ListNode next = null;
        
        while(right>0) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr=next;
            right--;
        }
        if(con!=null)
            con.next = prev;
        else
            head = prev;
        tail.next =curr;
    	return head;
    }
	static void print(ListNode head)
	{
		ListNode temp =head;
		while(temp!=null)
		{
			System.out.print(temp.data+" ");
			temp=temp.next;
		}
	}
	public static void main(String[] args) 
	{
		ListNode head1 = new ListNode(1);
		head1.next = new ListNode(2);
		head1.next.next = new ListNode(3);
		head1.next.next.next = new ListNode(4);
		head1.next.next.next.next = new ListNode(5);
		ListNode ans = reverseBetween(head1,1,2);
		
		print(ans);
	}

}
